{"mappings":"IAyLAA,EAtLA,MAKIC,YAAYC,GAMR,IAAIC,EALJC,KAAKC,MAAQH,EACbE,KAAKE,SAAWC,SAASC,cAAc,SAASJ,KAAKC,MAAMI,OAAOC,MAAM,KAAK,OAC7EN,KAAKO,MAAQP,KAAKQ,sBAClBR,KAAKS,MAAQT,KAAKU,YAIlBC,OAAOC,iBAAiB,UAAU,KAC9BC,aAAad,GAEbA,EAAgBe,WAAWd,KAAKe,OAAOC,KAAKhB,MAAO,QAGvDA,KAAKiB,cAMTF,SACIf,KAAKS,MAAQT,KAAKU,YAElBV,KAAKiB,cAMTA,cACIjB,KAAKE,SAASgB,UAAY,GAE1B,IAAK,IAAIC,KAAQnB,KAAKO,MAClBP,KAAKE,SAASkB,YAAYpB,KAAKqB,mBAAmBF,IAU1DE,mBAAmBC,GACf,IAAIxB,EAAKK,SAASoB,cAAc,QAEhC,IAAK,IAAIC,KAAOC,OAAOC,KAAKJ,EAAIK,YAC5B7B,EAAG0B,GAAOF,EAAIK,WAAWH,GAO7B,OAJmB,IAAfxB,KAAKS,QACLX,EAAG8B,OAAS5B,KAAK6B,iBAAiBP,IAG/BxB,EAQXU,sBACI,IAAID,EAAQP,KAAKE,SAAS4B,iBAAiB,QAE3C,OAAOC,MAAMC,KAAKzB,GAAO0B,KAAKnC,GACnBE,KAAKkC,6BAA6BpC,KAUjDoC,6BAA6BpC,GACzB,IAAIqC,EAAa,CACjBA,WAAwB,IAMxB,OAJArC,EAAGsC,oBAAoBC,SAAQb,GAAOW,EAAWR,WAAWH,GAAO1B,EAAG0B,KAEtEW,EAAWP,OAAS5B,KAAKsC,wBAAwBH,GAE1CA,EASXG,wBAAwBhB,GACpB,IACIM,EADAW,EAAYjB,EAAIK,WAAWC,OAAOtB,MAAM,KAG5C,OAAQgB,EAAIK,WAAWa,OACnB,IAAK,SACDZ,EAAS,CAAC,CACNa,EAAGF,EAAU,GACbG,EAAGH,EAAU,GACbI,EAAGJ,EAAU,KAEjB,MACJ,IAAK,OACDX,EAAS,CAAC,CACNa,EAAGF,EAAU,GACbG,EAAGH,EAAU,IACd,CACCE,EAAGF,EAAU,GACbG,EAAGH,EAAU,KAEjB,MACJ,IAAK,OACDX,EAAS,GACT,IAAK,IAAIgB,EAAI,EAAGA,EAAIL,EAAUM,OAAQD,GAAQ,EAC1ChB,EAAOkB,KAAK,CACRL,EAAGF,EAAUK,GACbF,EAAGH,EAAUK,EAAI,KAMjC,OAAOhB,EASXC,iBAAiBP,GACb,IAAIM,EACAmB,EAAM,GAEV,OAAQzB,EAAIK,WAAWa,OACnB,IAAK,OACL,IAAK,OACD,IAAK,IAAIQ,KAAQ1B,EAAIM,OACjBmB,EAAID,KAAKG,KAAKC,MAAMF,EAAKP,EAAIzC,KAAKS,QAClCsC,EAAID,KAAKG,KAAKC,MAAMF,EAAKN,EAAI1C,KAAKS,QAGtCmB,EAASmB,EAAII,KAAK,KAElB,MACJ,IAAK,SACD,IAAK,IAAIC,KAAQ9B,EAAIM,OACjBmB,EAAID,KAAKG,KAAKC,MAAME,EAAKX,EAAIzC,KAAKS,QAClCsC,EAAID,KAAKG,KAAKC,MAAME,EAAKV,EAAI1C,KAAKS,QAClCsC,EAAID,KAAKG,KAAKC,MAAME,EAAKT,EAAI3C,KAAKS,QAGtCmB,EAASmB,EAAII,KAAK,KAElB,MACJ,QACIvB,EAASN,EAAIK,WAAWC,OAIhC,OAAOA,EAQXlB,YACI,OAAOV,KAAKC,MAAMoD,MAAQrD,KAAKC,MAAMqD,eCnL7CnD,SAASoD,gBAAgBC,UAAUC,OAAO,SAC1CtD,SAASoD,gBAAgBC,UAAUE,IAAI,MAIvC,IAAI9D,EAFQO,SAASC,cAAc","sources":["UsefulImageMap.js","src/js/scripts.js"],"sourcesContent":["/**\n * Image map drawn to canvas.\n */\nclass UsefulImageMap {\n    /**\n     * Construct.\n     * @param el\n     */\n    constructor(el) {\n        this.image = el;\n        this.imageMap = document.querySelector(`[name=${this.image.useMap.split('#')[1]}]`);\n        this.areas = this._getInitialMapAreas();\n        this.scale = this._getScale();\n\n        let resizeTimeout;\n\n        window.addEventListener('resize', () => {\n            clearTimeout(resizeTimeout);\n\n            resizeTimeout = setTimeout(this.update.bind(this), 500);\n        });\n\n        this.renderAreas();\n    }\n\n    /**\n     * Update privates.\n     */\n    update() {\n        this.scale = this._getScale();\n\n        this.renderAreas();\n    }\n\n    /**\n     * Render ares from this.areas.\n     */\n    renderAreas() {\n        this.imageMap.innerHTML = '';\n\n        for (let area of this.areas) {\n            this.imageMap.appendChild(this._createAreaElement(area));\n        }\n    }\n\n    /**\n     * Create single area element from object.\n     * @param obj\n     * @returns {HTMLAreaElement}\n     * @private\n     */\n    _createAreaElement(obj) {\n        let el = document.createElement('area');\n\n        for (let key of Object.keys(obj.attributes)) {\n            el[key] = obj.attributes[key];\n        }\n\n        if (this.scale !== 1) {\n            el.coords = this._getScaledCoords(obj);\n        }\n\n        return el;\n    }\n\n    /**\n     * Get the initial map areas as array of objects.\n     * @returns {{}[]}\n     * @private\n     */\n    _getInitialMapAreas() {\n        let areas = this.imageMap.querySelectorAll('area');\n\n        return Array.from(areas).map((el) => {\n            return this._createAreaObjectFromElement(el);\n        });\n    }\n\n    /**\n     * Create area object from element.\n     * @param el\n     * @returns {{}}\n     * @private\n     */\n    _createAreaObjectFromElement(el) {\n        let areaObject = {}\n        areaObject.attributes = {};\n\n        el.getAttributeNames().forEach(key => areaObject.attributes[key] = el[key]);\n\n        areaObject.coords = this._createAreaObjectCoords(areaObject);\n\n        return areaObject;\n    }\n\n    /**\n     * Create area coords from object attributes.\n     * @param obj\n     * @returns {{r: string, x: string, y: string}|[{x: string, y: string},{x: string, y: string}]}\n     * @private\n     */\n    _createAreaObjectCoords(obj) {\n        let arrCoords = obj.attributes.coords.split(',');\n        let coords;\n\n        switch (obj.attributes.shape) {\n            case 'circle':\n                coords = [{\n                    x: arrCoords[0],\n                    y: arrCoords[1],\n                    r: arrCoords[2],\n                }]\n                break;\n            case 'rect':\n                coords = [{\n                    x: arrCoords[0],\n                    y: arrCoords[1],\n                }, {\n                    x: arrCoords[2],\n                    y: arrCoords[3],\n                }];\n                break;\n            case 'poly':\n                coords = [];\n                for (let i = 0; i < arrCoords.length; i = i + 2) {\n                    coords.push({\n                        x: arrCoords[i],\n                        y: arrCoords[i + 1],\n                    });\n                }\n                break;\n        }\n\n        return coords;\n    }\n\n    /**\n     * Get scaled area coords from object.\n     * @param obj\n     * @returns {string}\n     * @private\n     */\n    _getScaledCoords(obj) {\n        let coords;\n        let arr = [];\n\n        switch (obj.attributes.shape) {\n            case 'rect':\n            case 'poly':\n                for (let item of obj.coords) {\n                    arr.push(Math.round(item.x * this.scale));\n                    arr.push(Math.round(item.y * this.scale));\n                }\n\n                coords = arr.join(',');\n\n                break;\n            case 'circle':\n                for (let item of obj.coords) {\n                    arr.push(Math.round(item.x * this.scale));\n                    arr.push(Math.round(item.y * this.scale));\n                    arr.push(Math.round(item.r * this.scale));\n                }\n\n                coords = arr.join(',');\n\n                break;\n            default:\n                coords = obj.attributes.coords;\n                break;\n        }\n\n        return coords;\n    }\n\n    /**\n     * Get current scale factor of image map.\n     * @returns {number}\n     * @private\n     */\n    _getScale() {\n        return this.image.width / this.image.naturalWidth;\n    }\n}\n\nexport default UsefulImageMap;\n","import UsefulImageMap from '../../UsefulImageMap';\n\ndocument.documentElement.classList.remove('no-js');\ndocument.documentElement.classList.add('js');\n\nlet image = document.querySelector('#map-image');\n\nnew UsefulImageMap(image);\n"],"names":["$fac06cb4d72b5cac$export$2e2bcd8739ae039","constructor","el","resizeTimeout","this","image","imageMap","document","querySelector","useMap","split","areas","_getInitialMapAreas","scale","_getScale","window","addEventListener","clearTimeout","setTimeout","update","bind","renderAreas","innerHTML","area","appendChild","_createAreaElement","obj","createElement","key","Object","keys","attributes","coords","_getScaledCoords","querySelectorAll","Array","from","map","_createAreaObjectFromElement","areaObject","getAttributeNames","forEach","_createAreaObjectCoords","arrCoords","shape","x","y","r","i","length","push","arr","item","Math","round","join","item1","width","naturalWidth","documentElement","classList","remove","add"],"version":3,"file":"index.f705258e.js.map"}